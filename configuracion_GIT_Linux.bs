#!/bin/bash

#fuente: https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git
#Caching your GitHub credentials in Git
#    GitHub CLI
#    Git Credential Manager
#If you're cloning GitHub repositories using HTTPS, we recommend you use GitHub CLI or Git Credential Manager (GCM) to remember your credentials.
#Git Credential Manager (GCM) is another way to store your credentials securely and connect to GitHub over HTTPS. With GCM, you don't have to manually create and store a PAT, as GCM manages authentication on your behalf, including 2FA (two-factor authentication).
#For Linux, install Git and GCM, then configure Git to use GCM.



#1.Install Git from your distro's packaging system. Instructions will vary depending on the flavor of Linux you run.
#por lo general 'git' ya esta instalado en Linux, pero igual Probamos
sudo apt-get install --upgrade git




#2.Install GCM. See the instructions in the GCM repo, as they'll vary depending on the flavor of Linux you run.
    #https://github.com/GitCredentialManager/git-credential-manager#linux-install-instructions
#Descargamos el GCM 'gcmcore-linux_amd64.2.0.632.34631.deb' del siguiente enlace:
curl -LO https://github.com/GitCredentialManager/git-credential-manager/releases/download/v2.0.632/gcmcore-linux_amd64.2.0.632.34631.deb
#Instalamos el GCM
sudo dpkg -i gcmcore-linux_amd64.2.0.632.34631.deb
#Configuramos el GCM
git-credential-manager-core configure



#3.Configure Git to use GCM. There are several backing stores that you may choose from, so see the GCM docs to complete your setup. For more information, see "GCM Linux."
#Asignamos 'cache' como modo de autenticacion, esto hace que solo necesitemos entrar Una ves
#luego la informacion de inicio queda en cache y la coneccion con github ya es automatica
git config --global credential.credentialStore cache
#hacemos una copia del repositorio Nuestros
git clone https://github.com/MbaretePythonPY/ayudas.git
#agregamos un archivo al repositorio 'ayudas'
echo "texto de prueba $(date)" > ayudas/archivoDePrueba_$(whoami).txt
#agregamos los cambios y git para que les haga seguimiento 
git add -A
#creamos un commit para luego subirlo a Github
git commit -m "commit desde Linux $(whoami) $(date)"
#deberia retornar algo parecido a las siguientes lineas
    #[master 5185c78] commit desde LinuxLite
    # 1 file changed, 0 insertions(+), 0 deletions(-)
    # create mode 100644 archivo_de_pruebas.py

#ahora intentamos subir los cambios a github
#luego de este comando debes seleccionar 'Sign in with Browser' que seria inicar con el Navegador, 
#luego inicias secion si hace falta
git push origin master
#deberia retornar algo parecido a las siguientes lineas
    #info: please complete authentication in your browser...
    #Enumerating objects: 4, done.
    #Counting objects: 100% (4/4), done.
    #Delta compression using up to 2 threads
    #Compressing objects: 100% (2/2), done.
    #Writing objects: 100% (3/3), 338 bytes | 112.00 KiB/s, done.
    #Total 3 (delta 0), reused 0 (delta 0)
    #To https://github.com/MbaretePythonPY/ayudas.git
    #b4dbb2d..5185c78  master -> master
